import Swal from 'sweetalert2';
import { inject, Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
export class AlertService {
    constructor() {
        this.translate = inject(TranslateService);
    }
    alertText(title, message, fnConfirm, fnCancel) {
        Swal.fire({
            title: title,
            text: message,
            icon: 'success',
            confirmButtonColor: '#0CC27E',
            confirmButtonText: '<i class="ft-check-circle"></i> ' + this.translate.instant('OK')
        }).then((result) => {
            if (result.value) {
                fnConfirm();
            }
            else if (fnCancel !== undefined) {
                fnCancel();
            }
        });
    }
    confirmText(title, message, fnConfirm, fnCancel) {
        let mensagem = '';
        let params = {};
        if (message instanceof Array) {
            mensagem = message[0];
            params = message[1];
        }
        else {
            mensagem = message;
        }
        Swal.fire({
            title: title,
            text: mensagem,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#0CC27E',
            cancelButtonColor: '#FF586B',
            confirmButtonText: '<i class="ft-check-circle"></i> ' + this.translate.instant('SIM'),
            cancelButtonText: '<i class="ft-x-circle"></i> ' + this.translate.instant('NAO'),
        }).then((result) => {
            if (result.value) {
                fnConfirm();
            }
            else if (fnCancel !== undefined) {
                fnCancel();
            }
        });
    }
    confirmTextResetPassword(fnConfirm, fnCancel) {
        const swal = {
            title: this.translate.instant('RESETAR_SENHA'),
            text: this.translate.instant('DIGITE_CODIGO_AUTENTICACAO'),
            icon: 'info',
            input: 'text',
            inputValidator: (value) => {
                return !value && this.translate.instant('CAMPO_OBRIGATORIO');
            },
            showCancelButton: true,
            confirmButtonColor: '#0CC27E',
            cancelButtonColor: '#FF586B',
            cancelButtonText: '<i class="ft-x"></i> ' + this.translate.instant('CANCELAR'),
            confirmButtonText: '<i class="ft-check"></i> ' + this.translate.instant('OK'),
        };
        Swal.fire(swal).then((result) => {
            if (result.value) {
                fnConfirm(result.value);
            }
            else if (fnCancel !== undefined) {
                fnCancel();
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: AlertService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: AlertService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: AlertService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NoYXJlZC11dGlscy9zcmMvbGliL3NlcnZpY2VzL2FsZXJ0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxJQUFJLE1BQU0sYUFBYSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDOztBQUd2RCxNQUFNLE9BQU8sWUFBWTtJQUR6QjtRQUdFLGNBQVMsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztLQTBFdEM7SUF4RUMsU0FBUyxDQUFDLEtBQWEsRUFBRSxPQUFZLEVBQUUsU0FBZSxFQUFFLFFBQWM7UUFFcEUsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNSLEtBQUssRUFBRSxLQUFLO1lBQ1osSUFBSSxFQUFFLE9BQU87WUFDYixJQUFJLEVBQUUsU0FBUztZQUNmLGtCQUFrQixFQUFFLFNBQVM7WUFDN0IsaUJBQWlCLEVBQUUsa0NBQWtDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1NBQ3JGLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNqQixJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDakIsU0FBUyxFQUFFLENBQUM7WUFDZCxDQUFDO2lCQUFNLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRSxDQUFDO2dCQUNsQyxRQUFRLEVBQUUsQ0FBQztZQUNiLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFHRCxXQUFXLENBQUMsS0FBYSxFQUFFLE9BQVksRUFBRSxTQUFlLEVBQUUsUUFBYztRQUN0RSxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksT0FBTyxZQUFZLEtBQUssRUFBRSxDQUFDO1lBQzdCLFFBQVEsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixDQUFDO2FBQU0sQ0FBQztZQUNOLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDckIsQ0FBQztRQUVELElBQUksQ0FBQyxJQUFJLENBQUM7WUFDUixLQUFLLEVBQUUsS0FBSztZQUNaLElBQUksRUFBRSxRQUFRO1lBQ2QsSUFBSSxFQUFFLFVBQVU7WUFDaEIsZ0JBQWdCLEVBQUUsSUFBSTtZQUN0QixrQkFBa0IsRUFBRSxTQUFTO1lBQzdCLGlCQUFpQixFQUFFLFNBQVM7WUFDNUIsaUJBQWlCLEVBQUUsa0NBQWtDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1lBQ3JGLGdCQUFnQixFQUFFLDhCQUE4QixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztTQUNqRixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDakIsSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2pCLFNBQVMsRUFBRSxDQUFDO1lBQ2QsQ0FBQztpQkFBTSxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUUsQ0FBQztnQkFDbEMsUUFBUSxFQUFFLENBQUM7WUFDYixDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsd0JBQXdCLENBQUMsU0FBZSxFQUFFLFFBQWM7UUFFdEQsTUFBTSxJQUFJLEdBQXNCO1lBQzlCLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUM7WUFDOUMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLDRCQUE0QixDQUFDO1lBQzFELElBQUksRUFBRSxNQUFNO1lBQ1osS0FBSyxFQUFFLE1BQU07WUFDYixjQUFjLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDeEIsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1lBQzlELENBQUM7WUFDRCxnQkFBZ0IsRUFBRSxJQUFJO1lBQ3RCLGtCQUFrQixFQUFFLFNBQVM7WUFDN0IsaUJBQWlCLEVBQUUsU0FBUztZQUM1QixnQkFBZ0IsRUFBRSx1QkFBdUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7WUFDOUUsaUJBQWlCLEVBQUUsMkJBQTJCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1NBQzlFLENBQUM7UUFFRixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQzlCLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNqQixTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFCLENBQUM7aUJBQU0sSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFLENBQUM7Z0JBQ2xDLFFBQVEsRUFBRSxDQUFDO1lBQ2IsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs4R0ExRVUsWUFBWTtrSEFBWixZQUFZLGNBREEsTUFBTTs7MkZBQ2xCLFlBQVk7a0JBRHhCLFVBQVU7bUJBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3dlZXRBbGVydE9wdGlvbnMgfSBmcm9tICdzd2VldGFsZXJ0Mic7XHJcbmltcG9ydCBTd2FsIGZyb20gJ3N3ZWV0YWxlcnQyJztcclxuaW1wb3J0IHsgaW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcclxuXHJcbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxyXG5leHBvcnQgY2xhc3MgQWxlcnRTZXJ2aWNlIHtcclxuXHJcbiAgdHJhbnNsYXRlID0gaW5qZWN0KFRyYW5zbGF0ZVNlcnZpY2UpO1xyXG5cclxuICBhbGVydFRleHQodGl0bGU6IHN0cmluZywgbWVzc2FnZTogYW55LCBmbkNvbmZpcm0/OiBhbnksIGZuQ2FuY2VsPzogYW55KSB7XHJcblxyXG4gICAgU3dhbC5maXJlKHtcclxuICAgICAgdGl0bGU6IHRpdGxlLFxyXG4gICAgICB0ZXh0OiBtZXNzYWdlLFxyXG4gICAgICBpY29uOiAnc3VjY2VzcycsXHJcbiAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogJyMwQ0MyN0UnLFxyXG4gICAgICBjb25maXJtQnV0dG9uVGV4dDogJzxpIGNsYXNzPVwiZnQtY2hlY2stY2lyY2xlXCI+PC9pPiAnICsgdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnT0snKVxyXG4gICAgfSkudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgIGlmIChyZXN1bHQudmFsdWUpIHtcclxuICAgICAgICBmbkNvbmZpcm0oKTtcclxuICAgICAgfSBlbHNlIGlmIChmbkNhbmNlbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZm5DYW5jZWwoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgY29uZmlybVRleHQodGl0bGU6IHN0cmluZywgbWVzc2FnZTogYW55LCBmbkNvbmZpcm0/OiBhbnksIGZuQ2FuY2VsPzogYW55KSB7XHJcbiAgICBsZXQgbWVuc2FnZW0gPSAnJztcclxuICAgIGxldCBwYXJhbXMgPSB7fTtcclxuICAgIGlmIChtZXNzYWdlIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgbWVuc2FnZW0gPSBtZXNzYWdlWzBdO1xyXG4gICAgICBwYXJhbXMgPSBtZXNzYWdlWzFdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbWVuc2FnZW0gPSBtZXNzYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgIHRpdGxlOiB0aXRsZSxcclxuICAgICAgdGV4dDogbWVuc2FnZW0sXHJcbiAgICAgIGljb246ICdxdWVzdGlvbicsXHJcbiAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXHJcbiAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogJyMwQ0MyN0UnLFxyXG4gICAgICBjYW5jZWxCdXR0b25Db2xvcjogJyNGRjU4NkInLFxyXG4gICAgICBjb25maXJtQnV0dG9uVGV4dDogJzxpIGNsYXNzPVwiZnQtY2hlY2stY2lyY2xlXCI+PC9pPiAnICsgdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnU0lNJyksXHJcbiAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICc8aSBjbGFzcz1cImZ0LXgtY2lyY2xlXCI+PC9pPiAnICsgdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnTkFPJyksXHJcbiAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgaWYgKHJlc3VsdC52YWx1ZSkge1xyXG4gICAgICAgIGZuQ29uZmlybSgpO1xyXG4gICAgICB9IGVsc2UgaWYgKGZuQ2FuY2VsICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBmbkNhbmNlbCgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNvbmZpcm1UZXh0UmVzZXRQYXNzd29yZChmbkNvbmZpcm0/OiBhbnksIGZuQ2FuY2VsPzogYW55KSB7XHJcblxyXG4gICAgY29uc3Qgc3dhbDogU3dlZXRBbGVydE9wdGlvbnMgPSB7XHJcbiAgICAgIHRpdGxlOiB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdSRVNFVEFSX1NFTkhBJyksXHJcbiAgICAgIHRleHQ6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ0RJR0lURV9DT0RJR09fQVVURU5USUNBQ0FPJyksXHJcbiAgICAgIGljb246ICdpbmZvJyxcclxuICAgICAgaW5wdXQ6ICd0ZXh0JyxcclxuICAgICAgaW5wdXRWYWxpZGF0b3I6ICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgIHJldHVybiAhdmFsdWUgJiYgdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnQ0FNUE9fT0JSSUdBVE9SSU8nKVxyXG4gICAgICB9LFxyXG4gICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxyXG4gICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICcjMENDMjdFJyxcclxuICAgICAgY2FuY2VsQnV0dG9uQ29sb3I6ICcjRkY1ODZCJyxcclxuICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJzxpIGNsYXNzPVwiZnQteFwiPjwvaT4gJyArIHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ0NBTkNFTEFSJyksXHJcbiAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAnPGkgY2xhc3M9XCJmdC1jaGVja1wiPjwvaT4gJyArIHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ09LJyksXHJcbiAgICB9O1xyXG5cclxuICAgIFN3YWwuZmlyZShzd2FsKS50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgaWYgKHJlc3VsdC52YWx1ZSkge1xyXG4gICAgICAgIGZuQ29uZmlybShyZXN1bHQudmFsdWUpO1xyXG4gICAgICB9IGVsc2UgaWYgKGZuQ2FuY2VsICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBmbkNhbmNlbCgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==