import { inject, Injectable, signal } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
export class TranslationService {
    // Getter para o signal, para que o pipe e componentes possam usá-lo
    get currentLanguage() {
        return this.languageSignal;
    }
    get currentLang() {
        return this.languageSignal();
    }
    constructor() {
        this.http = inject(HttpClient);
        this.translations = {};
        // Signal para o idioma atual
        this.languageSignal = signal('pt-BR'); // Define o idioma padrão como inglês
        this.loadTranslations(this.languageSignal());
    }
    use(lang) {
        this.languageSignal.set(lang); // Atualiza o Signal
        this.loadTranslations(lang); // Carrega novas traduções
    }
    // Retorna uma string traduzida com base na chave
    getTranslation(key, params) {
        let translation = this.translations[key] || key; // Retorna a chave se a tradução não for encontrada
        // Substituir parâmetros dinâmicos, se houver
        if (params) {
            Object.keys(params).forEach((param) => {
                translation = translation.replace(`{{${param}}}`, params[param]);
            });
        }
        return translation;
    }
    instant(key, params) {
        return this.getTranslation(key, params);
    }
    loadTranslations(lang) {
        this.http
            .get(`assets/i18n/${lang}.json`)
            .subscribe((translations) => {
            this.translations = translations;
        });
    }
    getBrowserLang() {
        return window.navigator.language;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: TranslationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: TranslationService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: TranslationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NoYXJlZC11dGlscy9zcmMvbGliL3RyYW5zbGF0aW9uL3RyYW5zbGF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7QUFLbEQsTUFBTSxPQUFPLGtCQUFrQjtJQVE3QixvRUFBb0U7SUFDcEUsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVEO1FBZlEsU0FBSSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMxQixpQkFBWSxHQUE4QixFQUFFLENBQUM7UUFFckQsNkJBQTZCO1FBQ3JCLG1CQUFjLEdBQUcsTUFBTSxDQUFTLE9BQU8sQ0FBQyxDQUFDLENBQUMscUNBQXFDO1FBWXJGLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsR0FBRyxDQUFDLElBQVk7UUFDZCxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLG9CQUFvQjtRQUNuRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBRywwQkFBMEI7SUFDM0QsQ0FBQztJQUVELGlEQUFpRDtJQUNqRCxjQUFjLENBQUMsR0FBVyxFQUFFLE1BQVk7UUFDdEMsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxtREFBbUQ7UUFFcEcsNkNBQTZDO1FBQzdDLElBQUksTUFBTSxFQUFFLENBQUM7WUFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNwQyxXQUFXLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEtBQUssSUFBSSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ25FLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxPQUFPLENBQUMsR0FBVyxFQUFFLE1BQVk7UUFDL0IsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRU8sZ0JBQWdCLENBQUMsSUFBWTtRQUNuQyxJQUFJLENBQUMsSUFBSTthQUNOLEdBQUcsQ0FBNEIsZUFBZSxJQUFJLE9BQU8sQ0FBQzthQUMxRCxTQUFTLENBQUMsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUMxQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxjQUFjO1FBQ1osT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztJQUNuQyxDQUFDOzhHQXREVSxrQkFBa0I7a0hBQWxCLGtCQUFrQixjQUZqQixNQUFNOzsyRkFFUCxrQkFBa0I7a0JBSDlCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0LCBJbmplY3RhYmxlLCBTaWduYWwsIHNpZ25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0aW9uU2VydmljZSB7XHJcblxyXG4gIHByaXZhdGUgaHR0cCA9IGluamVjdChIdHRwQ2xpZW50KTtcclxuICBwcml2YXRlIHRyYW5zbGF0aW9uczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xyXG5cclxuICAvLyBTaWduYWwgcGFyYSBvIGlkaW9tYSBhdHVhbFxyXG4gIHByaXZhdGUgbGFuZ3VhZ2VTaWduYWwgPSBzaWduYWw8c3RyaW5nPigncHQtQlInKTsgLy8gRGVmaW5lIG8gaWRpb21hIHBhZHLDo28gY29tbyBpbmdsw6pzXHJcblxyXG4gIC8vIEdldHRlciBwYXJhIG8gc2lnbmFsLCBwYXJhIHF1ZSBvIHBpcGUgZSBjb21wb25lbnRlcyBwb3NzYW0gdXPDoS1sb1xyXG4gIGdldCBjdXJyZW50TGFuZ3VhZ2UoKTogU2lnbmFsPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuIHRoaXMubGFuZ3VhZ2VTaWduYWw7XHJcbiAgfVxyXG5cclxuICBnZXQgY3VycmVudExhbmcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5sYW5ndWFnZVNpZ25hbCgpO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmxvYWRUcmFuc2xhdGlvbnModGhpcy5sYW5ndWFnZVNpZ25hbCgpKTtcclxuICB9XHJcblxyXG4gIHVzZShsYW5nOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHRoaXMubGFuZ3VhZ2VTaWduYWwuc2V0KGxhbmcpOyAvLyBBdHVhbGl6YSBvIFNpZ25hbFxyXG4gICAgdGhpcy5sb2FkVHJhbnNsYXRpb25zKGxhbmcpOyAgIC8vIENhcnJlZ2Egbm92YXMgdHJhZHXDp8O1ZXNcclxuICB9XHJcblxyXG4gIC8vIFJldG9ybmEgdW1hIHN0cmluZyB0cmFkdXppZGEgY29tIGJhc2UgbmEgY2hhdmVcclxuICBnZXRUcmFuc2xhdGlvbihrZXk6IHN0cmluZywgcGFyYW1zPzogYW55KTogc3RyaW5nIHtcclxuICAgIGxldCB0cmFuc2xhdGlvbiA9IHRoaXMudHJhbnNsYXRpb25zW2tleV0gfHwga2V5OyAvLyBSZXRvcm5hIGEgY2hhdmUgc2UgYSB0cmFkdcOnw6NvIG7Do28gZm9yIGVuY29udHJhZGFcclxuXHJcbiAgICAvLyBTdWJzdGl0dWlyIHBhcsOibWV0cm9zIGRpbsOibWljb3MsIHNlIGhvdXZlclxyXG4gICAgaWYgKHBhcmFtcykge1xyXG4gICAgICBPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goKHBhcmFtKSA9PiB7XHJcbiAgICAgICAgdHJhbnNsYXRpb24gPSB0cmFuc2xhdGlvbi5yZXBsYWNlKGB7eyR7cGFyYW19fX1gLCBwYXJhbXNbcGFyYW1dKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRyYW5zbGF0aW9uO1xyXG4gIH1cclxuXHJcbiAgaW5zdGFudChrZXk6IHN0cmluZywgcGFyYW1zPzogYW55KTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmdldFRyYW5zbGF0aW9uKGtleSwgcGFyYW1zKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbG9hZFRyYW5zbGF0aW9ucyhsYW5nOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHRoaXMuaHR0cFxyXG4gICAgICAuZ2V0PHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0+KGBhc3NldHMvaTE4bi8ke2xhbmd9Lmpzb25gKVxyXG4gICAgICAuc3Vic2NyaWJlKCh0cmFuc2xhdGlvbnMpID0+IHtcclxuICAgICAgICB0aGlzLnRyYW5zbGF0aW9ucyA9IHRyYW5zbGF0aW9ucztcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRCcm93c2VyTGFuZygpe1xyXG4gICAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IubGFuZ3VhZ2U7XHJcbiAgfVxyXG59XHJcbiJdfQ==