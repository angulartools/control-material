export class Mask {
    static { this.LANG_PT = 'pt-BR'; }
    static { this.LANG_EN = 'en-US'; }
    static { this.LANG_ES = 'es-ES'; }
    static getMaskCnpj() {
        const mask = {
            mask: '00.000.000/0000-00',
            lazy: false,
            placeholderChar: ' '
        };
        return mask;
    }
    static getMaskCpf() {
        const mask = {
            mask: '000.000.000-00',
            lazy: false,
            placeholderChar: ' '
        };
        return mask;
    }
    static getMaskCep() {
        const mask = {
            mask: '00000-000',
            lazy: false,
            placeholderChar: '_'
        };
        return mask;
    }
    static getImaskCurrency(scale = 2, currencyCode = 'BRL') {
        const mask = {
            mask: Number,
            scale: scale,
            thousandsSeparator: currencyCode === 'BRL' ? '.' : ',',
            padFractionalZeros: true,
            normalizeZeros: true,
            radix: currencyCode === 'BRL' ? ',' : '.',
            signed: true
        };
        return mask;
    }
    static getImaskNumber(language, scale, signed) {
        const radix = (scale === 0 ? ' ' : ',');
        if (scale === undefined) {
            scale = 2;
        }
        const mask = {
            mask: Number,
            scale: scale,
            thousandsSeparator: '.',
            padFractionalZeros: true,
            normalizeZeros: true,
            signed: signed,
            radix: radix
        };
        switch (language) {
            case Mask.LANG_PT:
            case Mask.LANG_ES:
                break;
            case Mask.LANG_EN:
                mask.thousandsSeparator = ',',
                    mask.radix = '.';
                break;
            default:
                break;
        }
        return mask;
    }
    static getImaskNumberBigDecimal() {
        const mask = {
            mask: Number,
            scale: 6,
            thousandsSeparator: '.',
            padFractionalZeros: false,
            normalizeZeros: false,
            radix: ',',
        };
        return mask;
    }
    static getImaskLatitudeNumber() {
        const mask = {
            mask: Number,
            scale: 8,
            signed: true,
            thousandsSeparator: '.',
            padFractionalZeros: true,
            normalizeZeros: true,
            radix: ',',
            min: -99,
            max: 99
        };
        return mask;
    }
    static getImaskLongitudeNumber() {
        const mask = {
            mask: Number,
            scale: 8,
            signed: true,
            thousandsSeparator: '.',
            padFractionalZeros: true,
            normalizeZeros: true,
            radix: ',',
            min: -999,
            max: 999
        };
        return mask;
    }
    static getImaskTCelPhone(language) {
        const mask = {
            mask: '(00) 0 0000-0000',
            lazy: false,
            placeholderChar: ' '
        };
        return mask;
    }
    static getImaskTCelPhoneSemDDD(language) {
        const mask = {
            mask: '0 0000-0000',
            lazy: false,
            placeholderChar: ' '
        };
        return mask;
    }
    static getImaskTelephone(language) {
        const mask = {
            mask: '(00) 0000-0000',
            lazy: false,
            placeholderChar: '_'
        };
        switch (language) {
            case 'pt':
                break;
            case 'en':
                break;
            default:
                break;
        }
        return mask;
    }
    static getImaskTelephoneSemDDD(language) {
        const mask = {
            mask: '0000-0000',
            lazy: false,
            placeholderChar: ' '
        };
        switch (language) {
            case 'pt':
                break;
            case 'en':
                break;
            default:
                break;
        }
        return mask;
    }
    static getMaskHourMinute() {
        const mask = {
            mask: '00:00:00',
            lazy: false,
            placeholderChar: ' '
        };
        return mask;
    }
    static getMaskDate() {
        const mask = {
            mask: '00/00/0000',
            lazy: false,
            placeholderChar: ' '
        };
        return mask;
    }
    static getMaskIp() {
        const mask = {
            mask: 'IP.IP.IP.IP',
            blocks: {
                IP: {
                    mask: '0[00]',
                    minLength: 1,
                    from: 1,
                    to: 255,
                }
            }
        };
        return mask;
    }
    static getMaskImai() {
        const mask = {
            mask: '000000-00-000000-0',
            lazy: false,
            placeholderChar: ' '
        };
        return mask;
    }
}
//# sourceMappingURL=data:application/json;base64,