import { Pipe } from '@angular/core';
import IMask from 'imask';
import { Mask } from '../mask/mask';
import * as i0 from "@angular/core";
export class CpfCnpjFormat {
    constructor() {
        this.maskCnpj = IMask.createMask(Mask.getMaskCnpj());
        this.maskCpf = IMask.createMask(Mask.getMaskCpf());
    }
    transform(value) {
        if (value.length === 11) {
            this.maskCpf.resolve(value);
            return this.maskCpf.value;
        }
        else if (value.length === 14) {
            this.maskCnpj.resolve(value);
            return this.maskCnpj.value;
        }
        return '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: CpfCnpjFormat, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.2.9", ngImport: i0, type: CpfCnpjFormat, isStandalone: true, name: "cpfCnpjFormat" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: CpfCnpjFormat, decorators: [{
            type: Pipe,
            args: [{
                    name: 'cpfCnpjFormat',
                    standalone: true
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3BmLWNucGotZm9ybWF0LnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zaGFyZWQtdXRpbHMvc3JjL2xpYi9waXBlcy9jcGYtY25wai1mb3JtYXQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDMUIsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFNcEMsTUFBTSxPQUFPLGFBQWE7SUFKMUI7UUFNRSxhQUFRLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNoRCxZQUFPLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztLQVkvQztJQVZDLFNBQVMsQ0FBQyxLQUFhO1FBQ3JCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxFQUFFLEVBQUUsQ0FBQztZQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM1QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQzVCLENBQUM7YUFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFLENBQUM7WUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDN0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztRQUM3QixDQUFDO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDOzhHQWRVLGFBQWE7NEdBQWIsYUFBYTs7MkZBQWIsYUFBYTtrQkFKekIsSUFBSTttQkFBQztvQkFDRixJQUFJLEVBQUUsZUFBZTtvQkFDckIsVUFBVSxFQUFFLElBQUk7aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgSU1hc2sgZnJvbSAnaW1hc2snO1xyXG5pbXBvcnQgeyBNYXNrIH0gZnJvbSAnLi4vbWFzay9tYXNrJztcclxuXHJcbkBQaXBlKHtcclxuICAgIG5hbWU6ICdjcGZDbnBqRm9ybWF0JyxcclxuICAgIHN0YW5kYWxvbmU6IHRydWVcclxufSlcclxuZXhwb3J0IGNsYXNzIENwZkNucGpGb3JtYXQgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHJcbiAgbWFza0NucGogPSBJTWFzay5jcmVhdGVNYXNrKE1hc2suZ2V0TWFza0NucGooKSk7XHJcbiAgbWFza0NwZiA9IElNYXNrLmNyZWF0ZU1hc2soTWFzay5nZXRNYXNrQ3BmKCkpO1xyXG5cclxuICB0cmFuc2Zvcm0odmFsdWU6IHN0cmluZykge1xyXG4gICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMTEpIHtcclxuICAgICAgdGhpcy5tYXNrQ3BmLnJlc29sdmUodmFsdWUpO1xyXG4gICAgICByZXR1cm4gdGhpcy5tYXNrQ3BmLnZhbHVlO1xyXG4gICAgfSBlbHNlIGlmICh2YWx1ZS5sZW5ndGggPT09IDE0KSB7XHJcbiAgICAgIHRoaXMubWFza0NucGoucmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgIHJldHVybiB0aGlzLm1hc2tDbnBqLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICcnO1xyXG4gIH1cclxufVxyXG4iXX0=